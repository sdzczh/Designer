[{"id":"39ca82df4b5e6da28b6e5b90eb3517e9","title":"教你发行BSC链上可分其他代币|含营销钱包|通缩|回流 智能合约","content":"支持分红SHIB ETH USDT DOGE等BSC所有代币。\nRemixhttps://remix.ethereum.org/\n编译/开源参数COMPILER: v0.8.4+commit.e28d00a7.js\nEnable optimization: 开启并使用默认值200\nOther Settings: default evmVersion, MIT license\n合约核心源码\nconstructor(\n    string memory name_,\n    string memory symbol_,\n    uint256 totalSupply_,\n    address[2] memory addrs, &#x2F;&#x2F; reward, marketing wallet\n    uint256[3] memory feeSettings, &#x2F;&#x2F; rewards, liquidity, marketing\n    uint256 minimumTokenBalanceForDividends_\n) payable ERC20(name_, symbol_) &#123;\n    rewardToken &#x3D; addrs[0];\n    _marketingWalletAddress &#x3D; addrs[1];\n    require(\n        msg.sender !&#x3D; _marketingWalletAddress,\n        &quot;Owner and marketing wallet cannot be the same&quot;\n    );\n    totalSupply_ &#x3D; totalSupply_ * 10**18;\n    tokenRewardsFee &#x3D; feeSettings[0];\n    liquidityFee &#x3D; feeSettings[1];\n    marketingFee &#x3D; feeSettings[2];\n    totalFees &#x3D; tokenRewardsFee.add(liquidityFee).add(marketingFee);\n    require(totalFees &lt;&#x3D; 25, &quot;Total fee is over 25%&quot;);\n    swapTokensAtAmount &#x3D; totalSupply_.mul(2).div(10**6); &#x2F;&#x2F; 0.002%\n\n    &#x2F;&#x2F; use by default 300,000 gas to process auto-claiming dividends\n    gasForProcessing &#x3D; 300000;\n\n    dividendTracker &#x3D; BABYTOKENDividendTracker(\n        payable(Clones.clone(0xD2EE2Be66DD5Dd596469CDbac00b5Ad2554F80ea))\n    );\n    dividendTracker.initialize(\n        rewardToken,\n        minimumTokenBalanceForDividends_\n    );\n\n    IUniswapV2Router02 _uniswapV2Router &#x3D; IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n    &#x2F;&#x2F; Create a uniswap pair for this new token\n    address _uniswapV2Pair &#x3D; IUniswapV2Factory(_uniswapV2Router.factory())\n        .createPair(address(this), _uniswapV2Router.WETH());\n    uniswapV2Router &#x3D; _uniswapV2Router;\n    uniswapV2Pair &#x3D; _uniswapV2Pair;\n    _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\n\n    &#x2F;&#x2F; exclude from receiving dividends\n    dividendTracker.excludeFromDividends(address(dividendTracker));\n    dividendTracker.excludeFromDividends(address(this));\n    dividendTracker.excludeFromDividends(owner());\n    dividendTracker.excludeFromDividends(address(0xdead));\n    dividendTracker.excludeFromDividends(address(_uniswapV2Router));\n    &#x2F;&#x2F; exclude from paying fees or having max transaction amount\n    excludeFromFees(owner(), true);\n    excludeFromFees(_marketingWalletAddress, true);\n    excludeFromFees(address(this), true);\n    &#x2F;*\n        _mint is an internal function in ERC20.sol that is only called here,\n        and CANNOT be called ever again\n    *&#x2F;\n    _mint(owner(), totalSupply_);\n\n    emit TokenCreated(owner(), address(this), TokenType.baby, VERSION);\n\n    payable(serviceFeeReceiver_).transfer(serviceFee_);\n&#125;\n\nreceive() external payable &#123;&#125;\n\nfunction updateDividendTracker(address newAddress) public onlyOwner &#123;\n    require(\n        newAddress !&#x3D; address(dividendTracker),\n        &quot;BABYTOKEN: The dividend tracker already has that address&quot;\n    );\n\n    BABYTOKENDividendTracker newDividendTracker &#x3D; BABYTOKENDividendTracker(\n        payable(newAddress)\n    );\n\n    require(\n        newDividendTracker.owner() &#x3D;&#x3D; address(this),\n        &quot;BABYTOKEN: The new dividend tracker must be owned by the BABYTOKEN token contract&quot;\n    );\n\n    newDividendTracker.excludeFromDividends(address(newDividendTracker));\n    newDividendTracker.excludeFromDividends(address(this));\n    newDividendTracker.excludeFromDividends(owner());\n    newDividendTracker.excludeFromDividends(address(uniswapV2Router));\n\n    emit UpdateDividendTracker(newAddress, address(dividendTracker));\n\n    dividendTracker &#x3D; newDividendTracker;\n&#125;\n\n \n\n\n部署参数Value填写：200000000000000000 CONTRACT 选择 Babytoken，name_: BTC COIN (代币名称)symbol_: BTC (代币简称)totalSupply_: 21000000 (发行量 发多少就写多少)addds_: [“0x2859e4544C4bB03966803b044A93563Bd2D0DD4D”,”0x2859e4544C4bB03966803b044A93563Bd2D0DD4D”] (要分红的代币合约、营销钱包)feeSettings_: [4,3,1] (分红、流动性、营销钱包)minimumTokenBalanceForDividends_: 10000000000000000000000 (持有多少代币参与分红。数量后要加18个0)\nBSC常用代币合约地址SHIB: 0x2859e4544C4bB03966803b044A93563Bd2D0DD4DUSDT: 0x55d398326f99059fF775485246999027B3197955ETH:  0x2170Ed0880ac9A755fd29B2688956BD959F933F8DOGE: 0xbA2aE424d960c26247Dd6c32edC70B295c744C43BUSD: 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56CAKE: 0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82\n有任何问题请联系QQ：2510472590\n","slug":"教你发行BSC链上可分其他代币-含营销钱包-通缩-回流-智能合约/index","date":"2022-03-17T18:50:05.000Z","categories_index":"发币教程","tags_index":"区块链,BSC,教程","author_index":"Bug Designer"},{"id":"b0741c11219613863ac494c737cd8897","title":"Linux常见命令","content":"1.常见操作命令cd home, cd home&#x2F;tomcat # 定位到某个目录\ncd ..&#x2F; # 回到上一层目录\nls # 显示当前文件夹下的文件\ntab键 # 自动完成\nmkdir 文件夹名 # 新建文件夹\nmv 旧名称 新名称 # 移动文件，也可以用来重命名\nrm -rf 文件名 # 删除文件或者文件夹，其中，r表示递归删除子文件，f表示强制删除无需确认\n某个命令 --help # linux下大部分命令查看帮助方法\ncp -r 旧文件夹名 新文件夹名 # 复制文件夹或者文件，-r表示递归\nchmod 777 startup.sh # 给某个文件添加执行权限\ncurl http:&#x2F;&#x2F;liuxianan.com # 访问某个网址，返回HTML代码\nwget http:&#x2F;&#x2F;xxx.com&#x2F;123.zip # 下载文件\npkill node，pkill nginx # 强制杀死某个进程\n其它：\npwd # 查看当前目录\nwhoami # 查看当前登录用户\nwhich 某个命令 # 查看某个命令在path中所在路径\nwhere 某个命令 # 磁盘搜索某个命令\n2.查看磁盘空间、文件大小df -h # 查看所有磁盘剩余空间\ndu -h # 查看当前目录所有文件夹大小（包括子文件夹），-h 是转换成友好格式显示\ndu -h 文件夹名称 # 查看某个文件夹大小（包括子文件夹），由于会包括子文件，所以不要在根目录运行此命令，否则要等很久\ndu -sh 文件夹名称 # 查看某个文件夹大小（不包括子文件夹）\n很多人时间一长都分不清df和du，该如何记忆呢？这样记：\ndf &#x3D;&#x3D; Disk Free &#x3D;&#x3D; 磁盘剩余空间\ndu &#x3D;&#x3D; Disk Usage &#x3D;&#x3D; 磁盘已使用空间\n另外注意，在没有分区和格式化数据盘之前，使用 df –h命令，是无法看到数据盘的，可以使用fdisk -l命令查看。\n3.修改hosts直接vi /etc/hosts，修改完后跟windows一样会立即生效。\n4.解压压缩相关命令4.1. tartar -cvf FileName.tar DirName # 打包，其中c表示create，v表示verbosely（显示过程）\ntar -xvf FileName.tar # 解包，其中x表示extract\n注意：以上命令只是打包，不是压缩！\n4.2. gzgzip只能压缩单个文件：\ngzip FileName # 压缩，不会保留源文件\ngzip -d FileName.gz # 解压\n4.3. tar.gz 和 tgztar -zcvf FileName.tar.gz DirName # 压缩，注意是先写输出文件名，再写文件夹名\ntar -zxvf FileName.tar.gz # 解压到当前目录，文件名在原始基础上去掉后缀\n\n\n","slug":"Linux常见命令/index","date":"2022-03-16T17:39:07.000Z","categories_index":"操作系统","tags_index":"Linux","author_index":"Bug Designer"},{"id":"36c610caa1e43df0d3165a993cf0c93d","title":"Java使用Web3j进行eth和token转账","content":"ETH转账public static void transfer() throws Exception &#123;\n    Web3j web3j = Web3j.build(new HttpService(\"infura节点链接\"));\n    BigInteger bigInteger = new BigInteger(\"钱包私钥\", 16);\n    ECKeyPair ecKeyPair = ECKeyPair.create(bigInteger);\n    Credentials credentials = Credentials.create(ecKeyPair);\n    TransactionReceipt transactionReceipt = Transfer.sendFunds(web3j, credentials, \"目标地址\", BigDecimal.valueOf(0.001), Convert.Unit.ETHER).send();\n    System.out.println(transactionReceipt);\n&#125;\nToken转账public static void transferToken() throws Exception &#123;\n    Web3j web3j = Web3j.build(new HttpService(\"infura节点链接\"));\n    BigInteger bigInteger = new BigInteger(\"私钥\", 16);\n    ECKeyPair ecKeyPair = ECKeyPair.create(bigInteger);\n    Credentials credentials = Credentials.create(ecKeyPair);\n    String fromAddress = credentials.getAddress();\n    EthGetTransactionCount ethGetTransactionCount = web3j.ethGetTransactionCount(\n            fromAddress, DefaultBlockParameterName.LATEST).sendAsync().get();\n    BigInteger nonce = ethGetTransactionCount.getTransactionCount();\n\n    Address address = new Address(\"目标地址\");\n    Uint256 value = new Uint256(new BigInteger(\"数量 单位wei\"));\n    List&lt;Type> parametersList = new ArrayList&lt;>();\n    parametersList.add(address);\n    parametersList.add(value);\n    List&lt;TypeReference&lt;?>> outList = new ArrayList&lt;>();\n    Function function = new Function(\"transfer\", parametersList, outList);\n    String encodedFunction = FunctionEncoder.encode(function);\n    System.out.println( DefaultGasProvider.GAS_PRICE);\n    System.out.println(DefaultGasProvider.GAS_LIMIT);\n    RawTransaction rawTransaction = RawTransaction.createTransaction(nonce,  DefaultGasProvider.GAS_PRICE,\n            new BigInteger(\"210000\"), \"合约地址\", encodedFunction);\n    byte[] signedMessage = TransactionEncoder.signMessage(rawTransaction, credentials);\n    String hexValue = Numeric.toHexString(signedMessage);\n    EthSendTransaction ethSendTransaction = web3j.ethSendRawTransaction(hexValue).sendAsync().get();\n    Object transactionHash = ethSendTransaction.getTransactionHash();\n    System.out.println(transactionHash.toString());\n&#125;\n","slug":"Java使用Web3j进行eth和token转账/index","date":"2022-03-16T17:03:24.000Z","categories_index":"Web3","tags_index":"区块链,Java,Web3j","author_index":"Bug Designer"},{"id":"3185ced86f4b8df05c544660439ae3e8","title":"教你智能合约放弃所有权","content":"准备工作\nERC20标准代币会自己发行\n准备好【权限控制】相关代码\n有足够的币来支付gas费用\n\n对发布智能合约有疑问请参考我的另一篇文章《从零教你发行自己的以太坊ERC20智能合约》\n相关操作请在需要拥有【丢弃权限】功能的合约中添加以下代码，发币完成后执行renounceOwnership()函数即可完成丢弃权限操作，此时权限地址为0x0000000000000000000000000000000000000000\n\n\n\n\n\n\n\n\n\n注：renounceOwnership()操作不可挽回！\ncontract Ownable is Context &#123;\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    &#x2F;&#x2F;构造函数\n    constructor () internal &#123;\n        address msgSender &#x3D; _msgSender();\n        _owner &#x3D; msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    &#125;\n\n    &#x2F;&#x2F;权限所有人\n    function owner() public view returns (address) &#123;\n        return _owner;\n    &#125;\n\n    &#x2F;**\n     * 只有管理员可以操作\n     *&#x2F;\n    modifier onlyOwner() &#123;\n        require(_owner &#x3D;&#x3D; _msgSender(), &quot;Ownable: caller is not the owner&quot;);\n        _;\n    &#125;\n\n     &#x2F;**\n     * 丢弃权限\n     *&#x2F;\n    function renounceOwnership() public virtual onlyOwner &#123;\n        emit OwnershipTransferred(_owner, address(0));\n        _owner &#x3D; address(0);\n    &#125;\n\n    &#x2F;**\n     * @dev 将合同的所有权转移到一个新帐户（“newOwner”）。\n\t *      只能由当前所有者调用。\n     *&#x2F;\n    function transferOwnership(address newOwner) public virtual onlyOwner &#123;\n        require(newOwner !&#x3D; address(0), &quot;Ownable: new owner is the zero address&quot;);\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner &#x3D; newOwner;\n    &#125;\n&#125;","slug":"教你智能合约放弃所有权/index","date":"2022-03-16T16:53:39.000Z","categories_index":"发币教程","tags_index":"区块链,教程","author_index":"Bug Designer"},{"id":"a182aad2ec9a53a04c3cddb2b5345335","title":"手把手教你在opensea出售自己的NFT","content":"一、链接钱包本文所使用Rinkeby网络，打开官网链接钱包\n二、发行ERC721智能合约1、使用remix部署过程参考erc20智能合约，详见这篇文章\n2、在浏览器上进行合约开源开源的目的是为了更好的使用铸造方法链接钱包后我们使用铸造方法进行部署智能合约此处注意在uri栏中需要填入智能合约元数据，包含但不限于名称、logo、描述等信息，相见官网文档\n3、铸造完成后即可在【我的收集】中看到这个项目了点击进入后即可看到我们设置的相关信息\n结尾至此在opensea上发行我们自己的erc721智能合约教学即完成了\n","slug":"手把手教你在opensea出售自己的NFT/index","date":"2022-03-16T16:51:15.000Z","categories_index":"发币教程","tags_index":"区块链,教程","author_index":"Bug Designer"},{"id":"578d782843ce03dcc508f17328e6af31","title":"手把手教你在BSC主链上发币|BSC发币","content":"一、什么是币安智能链？\n\n\n\n\n\n\n\n\n币安智能链（BSC）可以被描述为与币安链并行的区块链。与币安链不同的地方在于，BSC拥有智能合约功能并与以太坊虚拟机（EVM）兼容。这里的设计目标是保持完整币安链的高吞吐量，同时将智能合约引入其生态系统。\n本质上两个区块链都是并行的。值得注意的是BSC并非所谓的第二层或链外扩展性解决方案。它是一个即使币安链下线后也可以运行的独立区块链。从设计的角度来看，这两个链非常相似。\n由于BSC与EVM兼容，因此它支持以太坊工具和DApp。理论上讲这使开发人员可以轻松地从以太坊移植其项目。对于用户而言，这表示他们可以轻松配置诸如MetaMask之类的应用程序与BSC一起使用，只需调整几个设置即可。\n二、相关信息官网：https://www.binance.org/cn\n区块链浏览器：https://bscscan.com/\n开发文档：https://docs.binance.org/index.html\n三、发智能合约教程1、安装metamask插件下载地址：https://metamask.io/\n2、添加自定义网络：chainid: 56\nrpc: https://bsc-dataseed.binance.org/\nscan: https://bscscan.com\n3、使用Remix部署合约Remix是在线的合约开发和部署工具。首先打开Remix页面\n\n左侧文件浏览器内，新建文件，比如Example.sol，在右侧编辑合约内容。\n\n编译合约\n点击左侧按钮，切换到编译界面；\n选择对应的合约；\n设置相关的编译选项；\n点击编译按钮进行编译；\n\n接下来要将编译后的合约部署到链上\n\n最后一步点击“确认”按钮以签署交易并向BSC广播交易\n","slug":"手把手教你在BSC主链上发币-BSC发币/index","date":"2022-03-16T10:38:19.000Z","categories_index":"发币教程","tags_index":"区块链,BSC,教程","author_index":"Bug Designer"}]